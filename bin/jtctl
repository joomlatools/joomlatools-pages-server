#!/usr/bin/env bash

UNAMEOUT="$(uname -s)"

# Verify operating system is supported...
case "${UNAMEOUT}" in
    Linux*)             MACHINE=linux;;
    Darwin*)            MACHINE=mac;;
    *)                  MACHINE="UNKNOWN"
esac

if [ "$MACHINE" == "UNKNOWN" ]; then
    echo "Unsupported operating system [$(uname -s)]. Joomlatools Server supports macOS, Linux, and Windows (WSL2)." >&2

    exit 1
fi

# Determine if stdout is a terminal...
if test -t 1; then
    # Determine if colors are supported...
    ncolors=$(tput colors)

    if test -n "$ncolors" && test "$ncolors" -ge 8; then
        BOLD="$(tput bold)"
        YELLOW="$(tput setaf 3)"
        GREEN="$(tput setaf 2)"
        NC="$(tput sgr0)"
    fi
fi

# Function that prints the available commands...
function display_help {
    echo "Joomlatools Server"
    echo
    echo "${YELLOW}Usage:${NC}" >&2
    echo "  jtctl COMMAND [options] [arguments]"
    echo
    echo "Unknown commands are passed to the docker-compose binary."
    echo
    echo "${YELLOW}docker-compose Commands:${NC}"
    echo "  ${GREEN}jtctl up${NC}        Start the server"
    echo "  ${GREEN}jtctl up -d${NC}     Start the server in the background"
    echo "  ${GREEN}jtctl stop${NC}      Stop the server"
    echo "  ${GREEN}jtctl restart${NC}   Restart the server"
    echo "  ${GREEN}jtctl ps${NC}        Display the status of all containers"
    echo
    echo "${YELLOW}Joomla Commands:${NC}"
    echo "  ${GREEN}jtctl joomla ...${NC}     Run a Joomlatools Console command within the 'joomlatools-server' container"
    echo
    echo "${YELLOW}Wordpress Commands:${NC}"
    echo "  ${GREEN}jtctl wp ...${NC}  Run a FolioShell command within the 'joomlatools-server' container"
    echo
    echo "${YELLOW}Composer Commands:${NC}"
    echo "  ${GREEN}jtctl composer ...${NC}   Run a Composer command within the 'joomlatools-server' container"
    echo
    echo "${YELLOW}Database Commands:${NC}"
    echo "  ${GREEN}jtctl mysql${NC}        Start a MySQL CLI session within the 'joomlatools-server' container"
    echo
    echo "${YELLOW}Container CLI:${NC}"
    echo "  ${GREEN}jtctl shell${NC}        Start a shell session within the 'joomlatools-server' container"
    echo "  ${GREEN}jtctl bash${NC}         Alias for 'jtctl shell'"
    #echo "  ${GREEN}jtctl tinker${NC}       Start a new Tinker session"
    #echo
    #echo "${YELLOW}Sharing:${NC}"
    #echo "  ${GREEN}jtctl share${NC}   Share the application publicly via a temporary URL"
    echo
    echo "${YELLOW}Binaries:${NC}"
    echo "  ${GREEN}jtctl bin ...${NC}   Run Composer binary scripts from the vendor/bin directory"

    exit 1
}

# Proxy the "help" command...
if [ $# -gt 0 ]; then
    if [ "$1" == "help" ] || [ "$1" == "-h" ] || [ "$1" == "-help" ] || [ "$1" == "--help" ]; then
        display_help
    fi
else
    display_help
fi

# Source the ".env" file so Laravel's environment variables are available...
if [ -f ./.env ]; then
    source ./.env
fi

# Define environment variables...
export SERVER_SERVICE=${SERVER_SERVICE:-"joomlatools-server"}
export SERVER_FILES=${SERVER_FILES:-""}

# Function that outputs Joomlatools Server is not running...
function server_is_not_running {
    echo "${BOLD}Joomlatools Server is not running.${NC}" >&2
    echo "" >&2
    echo "${BOLD}You may start Joomlatools Server using the following commands:${NC} './bin/jtctl up' or './bin/jtctl up -d'" >&2

    exit 1
}

# Define Docker Compose command prefix...
docker compose &> /dev/null
if [ $? == 0 ]; then
    DOCKER_COMPOSE=(docker compose)
else
    DOCKER_COMPOSE=(docker-compose)
fi

if [ -n "$SERVER_FILES" ]; then
    # Convert SERVER_FILES to an array...
    SERVER_FILES=("${SERVER_FILES//:/ }")

    for FILE in "${SERVER_FILES[@]}"; do
        if [ -f "$FILE" ]; then
            DOCKER_COMPOSE+=(-f "$FILE")
        else
            echo "${BOLD}Unable to find Docker Compose file: '${FILE}'${NC}" >&2

            exit 1
        fi
    done
fi

EXEC="yes"

if [ -z "$SERVER_SKIP_CHECKS" ]; then
    # Ensure that Docker is running...
    if ! docker info > /dev/null 2>&1; then
        echo "${BOLD}Docker is not running.${NC}" >&2

        exit 1
    fi

    # Determine if server is currently up...
    if "${DOCKER_COMPOSE[@]}" ps "$SERVER_SERVICE" 2>&1 | grep 'Exit\|exited'; then
        echo "${BOLD}Shutting down old processes...${NC}" >&2

        "${DOCKER_COMPOSE[@]}" down > /dev/null 2>&1

        EXEC="no"
    elif [ -z "$("${DOCKER_COMPOSE[@]}" ps -q)" ]; then
        EXEC="no"
    fi
fi

ARGS=()

# Proxy PHP commands to the "php" binary on the server container...
if [ "$1" == "php" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec)
        [ ! -t 0 ] && ARGS+=(-T)
        ARGS+=("$SERVER_SERVICE" "php" "$@")
    else
        server_is_not_running
    fi

# Proxy vendor binary commands on the server container...
elif [ "$1" == "bin" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec)
        [ ! -t 0 ] && ARGS+=(-T)
        ARGS+=("$SERVER_SERVICE" ./vendor/bin/"$@")
    else
        server_is_not_running
    fi

# Proxy docker-compose commands to the docker-compose binary on the server container...
elif [ "$1" == "docker-compose" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec)
        [ ! -t 0 ] && ARGS+=(-T)
        ARGS+=("$SERVER_SERVICE" "${DOCKER_COMPOSE[@]}")
    else
        server_is_not_running
    fi

# Proxy Composer commands to the "composer" binary on the server container...
elif [ "$1" == "composer" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec)
        [ ! -t 0 ] && ARGS+=(-T)
        ARGS+=("$SERVER_SERVICE" "composer" "$@")
    else
        server_is_not_running
    fi

# Proxy Artisan commands to the "artisan" binary on the server container...
elif [ "$1" == "joomla" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec)
        [ ! -t 0 ] && ARGS+=(-T)
        ARGS+=("$SERVER_SERVICE" joomla "$@")
    else
        server_is_not_running
    fi

# Proxy Wordpress commands to the "artisan" binary on the server container...
elif [ "$1" == "wp" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec)
        [ ! -t 0 ] && ARGS+=(-T)
        ARGS+=("$SERVER_SERVICE" folioshell "$@")
    else
        server_is_not_running
    fi

# Initiate a Tinker session within the server container...
#elif [ "$1" == "tinker" ] ; then
#    shift 1

#    if [ "$EXEC" == "yes" ]; then
#        ARGS+=(exec)
#        [ ! -t 0 ] && ARGS+=(-T)
#        ARGS+=("$SERVER_SERVICE" php  tinker)
#    else
#        server_is_not_running
#    fi

# Initiate a MySQL CLI terminal session within the "mysql" container...
elif [ "$1" == "mysql" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec)
        [ ! -t 0 ] && ARGS+=(-T)
        ARGS+=("$SERVER_SERVICE" mysql bash -c)
        ARGS+=("MYSQL_PWD=\${MYSQL_PASS} mysql -u \${MYSQL_USER}")
    else
        server_is_not_running
    fi

# Initiate a Bash shell within the server container...
elif [ "$1" == "shell" ] || [ "$1" == "bash" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec)
        [ ! -t 0 ] && ARGS+=(-T)
        ARGS+=("$SERVER_SERVICE" bash "$@")
    else
        server_is_not_running
    fi

# Pass unknown commands to the "docker-compose" binary...
else
    ARGS+=("$@")
fi

# Run Docker Compose with the defined arguments...
"${DOCKER_COMPOSE[@]}" "${ARGS[@]}"