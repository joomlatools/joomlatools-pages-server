#!/usr/bin/env bash

UNAMEOUT="$(uname -s)"

# Verify operating system is supported...
case "${UNAMEOUT}" in
    Linux*)             MACHINE=linux;;
    Darwin*)            MACHINE=mac;;
    *)                  MACHINE="UNKNOWN"
esac

if [ "$MACHINE" == "UNKNOWN" ]; then
    echo "Unsupported operating system [$(uname -s)]. Joomlatools Server supports macOS, Linux, and Windows (WSL2)." >&2
    exit 1
fi

if [[ ! -z "${APP_NAME}" ]]; then
  SERVER_IS_INTERNAL=true;
else
  SERVER_IS_INTERNAL=false;
fi

if [[ "${UDSER}" == "root" ]]; then
  SERVER_IS_ROOT=true;
else
  SERVER_IS_ROOT=false;
fi


# Determine if stdout is a terminal...
if test -t 1; then
    # Determine if colors are supported...
    ncolors=$(tput colors)

    if test -n "$ncolors" && test "$ncolors" -ge 8; then
        BOLD="$(tput bold)"
        YELLOW="$(tput setaf 3)"
        GREEN="$(tput setaf 2)"
        NC="$(tput sgr0)"
    fi
fi

# Function that prints the available commands...
function display_help {
    echo "Joomlatools Server"
    echo
    echo "${YELLOW}Usage:${NC}" >&2
    echo "  jtctl COMMAND [options] [arguments]"
    echo
    if [ $SERVER_IS_INTERNAL = false ]; then
    echo "Unknown commands are passed to the docker-compose binary."
    echo
    fi

    if [ $SERVER_IS_INTERNAL = false ]; then
      echo "${YELLOW}Docker Commands:${NC}"
      echo "  ${GREEN}jtctl start${NC}        Start the server"
      echo "  ${GREEN}jtctl start -d${NC}     Start the server in the background"
      echo "  ${GREEN}jtctl stop${NC}         Stop the server"
      echo "  ${GREEN}jtctl remove${NC}       Stop the server, remove all containers and networks"
      echo "  ${GREEN}jtctl restart${NC}      Restart the server"
      echo "  ${GREEN}jtctl destroy${NC}      Destroy the server, remove all images, and volumes"
      echo "  ${GREEN}jtctl status${NC}       Display the status of all containers"
      echo
    fi

    echo "${YELLOW}Server Commands (within the joomlatools-server container):${NC}"
    echo "  ${GREEN}jtctl apache reload${NC}    Reload Apache service"
    echo "  ${GREEN}jtctl apache restart${NC}   Restart Apache service"
    echo "  ${GREEN}jtctl apache status${NC}    Status of the Apache service"
    echo "  ${GREEN}jtctl phpfpm reload${NC}    Reload PHPFPM service"
    echo "  ${GREEN}jtctl phpfpm restart${NC}   Restart PHPFPM service"
    echo "  ${GREEN}jtctl phpfpm status${NC}    Check PHPFPM service status"
    echo "  ${GREEN}jtctl apache status${NC}    Check Apache service status"
    echo "  ${GREEN}jtctl api reload${NC}       Reload Api service"
    echo "  ${GREEN}jtctl api restart${NC}      Restart Api service"
    echo "  ${GREEN}jtctl api status${NC}       Check Api service status"

    if [ $SERVER_IS_INTERNAL = false ]; then
      echo "  ${GREEN}jtctl shell${NC}            Start a shell session"
      echo "  ${GREEN}jtctl bash${NC}             Alias for 'jtctl shell'"
      echo
    fi

    echo "${YELLOW}Joomla Commands (within the 'joomlatools-server' container):${NC}"
    echo "  ${GREEN}jtctl joomla ...${NC}     Run a Joomlatools Console command"
    echo
    echo "${YELLOW}Wordpress Commands (within the 'joomlatools-server' container):${NC}"
    echo "  ${GREEN}jtctl wp ...${NC}         Run a FolioShell command"
    echo
    echo "${YELLOW}Composer Commands (within the 'joomlatools-server' container):${NC}"
    echo "  ${GREEN}jtctl composer ...${NC}   Run a Composer command"
    echo "  ${GREEN}jtctl bin ...${NC}        Run Composer binary scripts from the vendor/bin directory"
    echo
    echo "${YELLOW}Database Commands (within the 'joomlatools-server' container):${NC}"
    echo "  ${GREEN}jtctl mysql${NC}          Start a MySQL CLI session"
    echo
    #echo "  ${GREEN}jtctl tinker${NC}        Start a new Tinker session"
    #echo
    if [ $SERVER_IS_INTERNAL = false ]; then
    echo "${YELLOW}Sharing:${NC}"
    echo "  ${GREEN}jtctl share${NC}         Share the application publicly via a temporary URL"
    fi
    exit 1
}

# Proxy the "help" command...
if [ $# -gt 0 ]; then
    if [ "$1" == "help" ] || [ "$1" == "-h" ] || [ "$1" == "-help" ] || [ "$1" == "--help" ]; then
        display_help
    fi
else
    display_help
fi

# Source the ".env" if it is available
if [ -f ./.env ]; then
    source ./.env
fi

# Define environment variables...
if [ $SERVER_IS_INTERNAL = false ]; then
  export SERVER_SERVICE=${SERVER_SERVICE:-"joomlatools-server"}
else
  export SERVER_SERVICE=""
fi

export SERVER_FILES=${SERVER_FILES:-""}

# Function that outputs Joomlatools Server is not running...
function server_is_not_running {
    echo "${BOLD}Joomlatools Server is not running.${NC}" >&2
    echo "" >&2
    echo "${BOLD}You may start Joomlatools Server using the following commands:${NC} './bin/jtctl start' or './bin/jtctl start -d'" >&2

    exit 1
}

# Define Docker Compose command prefix...
docker compose &> /dev/null
if [ $? == 0 ]; then
    DOCKER_COMPOSE=(docker compose)
else
    DOCKER_COMPOSE=(docker-compose)
fi

if [ $SERVER_IS_INTERNAL = false  ] && [ -n "$SERVER_FILES" ]; then
    # Convert SERVER_FILES to an array...
    SERVER_FILES=("${SERVER_FILES//:/ }")

    for FILE in "${SERVER_FILES[@]}"; do
        if [ -f "$FILE" ]; then
            DOCKER_COMPOSE+=(-f "$FILE")
        else
            echo "${BOLD}Unable to find Docker Compose file: '${FILE}'${NC}" >&2

            exit 1
        fi
    done
fi

EXEC="yes"

if [ $SERVER_IS_INTERNAL = false ] && [ -z "$SERVER_SKIP_CHECKS" ]; then
    # Ensure that Docker is running...
    if ! docker info > /dev/null 2>&1; then
        echo "${BOLD}Docker is not running.${NC}" >&2

        exit 1
    fi

    # Determine if server is currently up...
    if "${DOCKER_COMPOSE[@]}" ps "$SERVER_SERVICE" 2>&1 | grep 'Exit\|exited'; then
        EXEC="no"
    elif [ -z "$("${DOCKER_COMPOSE[@]}" ps -q)" ]; then
        EXEC="no"
    fi
fi

ARGS=()

# Proxy start command
if [ $SERVER_IS_INTERNAL = false  ] && [ "$1" == "start" ]; then
    shift 1

    #[ ! -t 0 ] && ARGS+=(-T)
    ARGS+=(--profile all up)
    ARGS+=("$@")

# Proxy stop command
elif [ $SERVER_IS_INTERNAL = false  ] && [ "$1" == "stop" ]; then
    shift 1

    #[ ! -t 0 ] && ARGS+=(-T)
    ARGS+=(--profile all stop)
    ARGS+=("$@")

# Proxy remove command
elif [ $SERVER_IS_INTERNAL = false  ] && [ "$1" == "remove" ]; then
    shift 1

    ARGS+=(--profile all down)
    ARGS+=("$@")

# Proxy restart command
elif [ $SERVER_IS_INTERNAL = false  ] && [ "$1" == "restart" ]; then
    shift 1

    ARGS+=(--profile all restart)
    ARGS+=("$@")

# Proxy destroy command
elif [ $SERVER_IS_INTERNAL = false  ] && [ "$1" == "destroy" ]; then
    shift 1

    [ ! -t 0 ] && ARGS+=(-T)
    ARGS+=(--profile all down --rmi all -v)
    ARGS+=("$@")

# Proxy status command
elif [ $SERVER_IS_INTERNAL = false  ] && [ "$1" == "status" ]; then
    shift 1

    ARGS+=(ps)
    ARGS+=("$@")

# Proxy Composer commands to the "composer" binary on the server container...
elif [ "$1" == "composer" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then

        if [ $SERVER_IS_INTERNAL = false ]; then
          ARGS+=(exec)
          ARGS+=("$SERVER_SERVICE")
        fi

        [ ! -t 0 ] && ARGS+=(-T)
        ARGS+=("composer" "$@")
    else
        server_is_not_running
    fi

# Proxy vendor binary commands on the server container...
elif [ "$1" == "bin" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then

        if [ $SERVER_IS_INTERNAL = false ]; then
          ARGS+=(exec)
          ARGS+=("$SERVER_SERVICE")
        fi

        [ ! -t 0 ] && ARGS+=(-T)
        ARGS+=(./vendor/bin/"$@")
    else
        server_is_not_running
    fi

# Proxy Joomla commands to the "joomla" binary on the server container...
elif [ "$1" == "joomla" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then

        if [ $SERVER_IS_INTERNAL = false ]; then
          ARGS+=(exec)
          ARGS+=("$SERVER_SERVICE")
        fi

        [ ! -t 0 ] && ARGS+=(-T)
        ARGS+=(joomla "$@")
    else
        server_is_not_running
    fi

# Proxy Wordpress commands to the "folioshell" binary on the server container...
elif [ "$1" == "wp" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then

        if [ $SERVER_IS_INTERNAL = false  ]; then
          ARGS+=(exec)
          ARGS+=("$SERVER_SERVICE")
        fi

        [ ! -t 0 ] && ARGS+=(-T)
        ARGS+=(folioshell "$@")
    else
        server_is_not_running
    fi

# Initiate a Tinker session within the server container...
#elif [ "$1" == "tinker" ] ; then
#    shift 1

#    if [ "$EXEC" == "yes" ]; then
#        ARGS+=(exec)
#        [ ! -t 0 ] && ARGS+=(-T)
#        ARGS+=("$SERVER_SERVICE" php  tinker)
#    else
#        server_is_not_running
#    fi

# Initiate a MySQL CLI terminal session within the "mysql" container...
elif [ "$1" == "mysql" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then

        if [ $SERVER_IS_INTERNAL = false ]; then
            ARGS+=(exec)
            ARGS+=("$SERVER_SERVICE")
        fi

        [ ! -t 0 ] && ARGS+=(-T)
        ARGS+=(mysql)
    else
        server_is_not_running
    fi

# Initiate a Bash shell within the server container...
elif [[ $SERVER_IS_INTERNAL = false && ("$1" == "shell" || "$1" == "bash") ]] ; then

    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec)
        [ ! -t 0 ] && ARGS+=(-T)
        ARGS+=("$SERVER_SERVICE" bash "$@")
    else
        server_is_not_running
    fi

# Reload Apache
elif [ "$1" == "apache" ]  && [ "$2" == "reload" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then

        if [ $SERVER_IS_INTERNAL = false ]; then
            ARGS+=(exec)
            ARGS+=("$SERVER_SERVICE")
        elif [ $SERVER_IS_ROOT = false ]; then
            ARGS+=(sudo)
        fi

        ARGS+=(s6-svc -1 /var/run/s6/services/apache)
    else
        server_is_not_running
    fi

# Restart Apache
elif [ "$1" == "apache" ] && [ "$2" == "restart" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then

      if [ $SERVER_IS_INTERNAL = false ]; then
          ARGS+=(exec)
          ARGS+=("$SERVER_SERVICE")
      elif [ $SERVER_IS_ROOT = false ]; then
          ARGS+=(sudo)
      fi

      ARGS+=(s6-svc -r /var/run/s6/services/apache)
    else
        server_is_not_running
    fi

# Check Apache status
elif [ "$1" == "apache" ] && [ "$2" == "status" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then

        if [ $SERVER_IS_INTERNAL = false ]; then
            ARGS+=(exec)
            ARGS+=("$SERVER_SERVICE")
        elif [ $SERVER_IS_ROOT = false ]; then
            ARGS+=(sudo)
        fi

        ARGS+=(s6-svstat /var/run/s6/services/apache)
    else
        server_is_not_running
    fi

# Reload Apache
elif [ "$1" == "phpfpm" ] && [ "$2" == "reload" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then

        if [ $SERVER_IS_INTERNAL = false ]; then
            ARGS+=(exec)
            ARGS+=("$SERVER_SERVICE")
        elif [ $SERVER_IS_ROOT = false ]; then
            ARGS+=(sudo)
        fi

        ARGS+=(s6-svc -2 /var/run/s6/services/phpfpm)
    else
        server_is_not_running
    fi

# Restart Apache
elif [ "$1" == "phpfpm" ] && [ "$2" == "restart" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then

        if [ $SERVER_IS_INTERNAL = false ]; then
            ARGS+=(exec)
            ARGS+=("$SERVER_SERVICE")
        elif [ $SERVER_IS_ROOT = false ]; then
            ARGS+=(sudo)
        fi

        ARGS+=("$SERVER_SERVICE" s6-svc -r /var/run/s6/services/phpfpm)
    else
        server_is_not_running
    fi

# Check Apache status
elif [ "$1" == "phpmpm" ] && [ "$2" == "status" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then

        if [ $SERVER_IS_INTERNAL = false ]; then
            ARGS+=(exec)
            ARGS+=("$SERVER_SERVICE")
        elif [ $SERVER_IS_ROOT = false ]; then
            ARGS+=(sudo)
        fi

        ARGS+=("$SERVER_SERVICE" s6-svstat /var/run/s6/services/phpfpm)
    else
        server_is_not_running
    fi

# Reload Apache
elif [ "$1" == "api" ] && [ "$2" == "reload" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then

       if [ $SERVER_IS_INTERNAL = false ]; then
            ARGS+=(exec)
            ARGS+=("$SERVER_SERVICE")
       elif [ $SERVER_IS_ROOT = false ]; then
            ARGS+=(sudo)
       fi

      ARGS+=("$SERVER_SERVICE" s6-svc -2 /var/run/s6/services/api)
    else
        server_is_not_running
    fi

# Restart Apache
elif [ "$1" == "api" ] && [ "$2" == "restart" ]; then
    shift 1


    if [ "$EXEC" == "yes" ]; then

       if [ $SERVER_IS_INTERNAL = false ]; then
          ARGS+=(exec)
          ARGS+=("$SERVER_SERVICE")
       elif [ $SERVER_IS_ROOT = false ]; then
          ARGS+=(sudo)
       fi

       ARGS+=("$SERVER_SERVICE" s6-svc -r /var/run/s6/services/api)
    else
        server_is_not_running
    fi

# Check Apache status
elif [ "$1" == "api" ] && [ "$2" == "status" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then

      if [ $SERVER_IS_INTERNAL = false ]; then
          ARGS+=(exec)
          ARGS+=("$SERVER_SERVICE")
      elif [ $SERVER_IS_ROOT = false ]; then
          ARGS+=(sudo)
      fi

      ARGS+=("$SERVER_SERVICE" s6-svstat /var/run/s6/services/api)
    else
        server_is_not_running
    fi

# Proxy share command
elif [ "$1" == "share" ]; then
    shift 1

    echo 'Starting a new tunnel...'

    docker run --rm --name joomlatools-tunnel cloudflare/cloudflared tunnel --url http://host.docker.internal:80 > /dev/null 2>&1 & 
    sleep 4 && docker logs joomlatools-tunnel  2>&1 | grep -Eo 'http(.*?)trycloudflare.com' | tail -1 & 
    wait

    exit

# Pass unknown commands to the "docker-compose" binary...
else
    if [ $SERVER_IS_INTERNAL = false  ]; then
      ARGS+=("$@")
    fi
fi

# Run Docker Compose with the defined arguments...
if [ $SERVER_IS_INTERNAL = false  ]; then
"${DOCKER_COMPOSE[@]}" "${ARGS[@]}"
else
"${ARGS[@]}"
fi
